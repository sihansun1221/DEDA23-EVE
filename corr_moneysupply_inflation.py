import matplotlib.pyplot as plt
import numpy as np

def plot_inflation_vs_money_supply(inflation_rate, money_supply):
    months = range(len(inflation_rate))

    fig, ax1 = plt.subplots()

    color = 'tab:red'
    ax1.set_xlabel('Month')
    ax1.set_ylabel('Inflation Rate', color=color)
    ax1.plot(months, inflation_rate, color=color)
    ax1.tick_params(axis='y', labelcolor=color)

    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

    color = 'tab:blue'
    ax2.set_ylabel('Money Supply', color=color)
    ax2.plot(months, money_supply, color=color)
    ax2.tick_params(axis='y', labelcolor=color)

    fig.tight_layout()  # otherwise the right y-label is slightly clipped
    plt.title('Inflation Rate vs Money Supply')
    plt.show()

    # Calculate the correlation coefficient
    correlation = np.corrcoef(inflation_rate, money_supply)[0, 1]
    print("Correlation Coefficient:", correlation)

    # Create a scatter plot
    plt.scatter(money_supply, inflation_rate)
    plt.xlabel('Money Supply')
    plt.ylabel('Inflation Rate')
    plt.title('Inflation Rate vs Money Supply (Scatter Plot)')
    plt.show()

#Example usage: Plotting inflation rate against money supply
inflation_rate = [0.0003978082270312437, 0.00042140546593938784, -0.000192557023030297, 
                  -0.00010377523884848786, 0.00042824097078787883, 0.0008632039426060607, 
                  0.0011748775262424092, 0.0007480379379999938, 0.00022082990790625313, 
                  0.0006990297174062438, -0.00012667258080645164, 0.00046950018419354835, 
                  0.0006549674145161226, -0.00019139051287095805, 8.445702490321935e-05, 
                  0.0005574195048387031, 0.00016947502513888613, 0.0005699075468888888, 
                  -0.0008322634387222167, 0.00031567094538888604, -0.00030084955908332776, 
                  -0.00029197754452776664, 0.00012657045750000278, 0.0006596340189444444, 
                  -1.4166454166694488e-06, 0.00037475577630554724, 0.0002963190056111166, 
                  0.0009105286677222195, 0.0004575681319166528, 0.0003853252599722139, 
                  -0.00014532610744444165, -0.0008479696124722223, -0.0007357844674444333, 
                  0.00010071161047222222, 0.00015685651555555553, 0.0007290409934166528, 
                  0.00014927521972221388, -0.00025516406758334165, -2.8212306222222198e-05, 
                  0.00014526232358333334, -0.0005514136781944417, -0.001070263366416661, 
                  3.067153052778335e-05, -0.0006965095472499916, 0.0005113148525555528, 
                  0.001047463785138872, -0.0002465411578333305, -0.00010040785083333332, 
                  0.0003843196623611111, 0.0001425872531388861, 0.0002878988422499944, 
                  0.0018224112747222167, 0.0006574193894444417, -0.0004159219262222222, 
                  9.752134119444445e-05, 0.000858724663916675, 0.00037902069824998885, 
                  0.00017379505066666392, -0.0001688915149166639, 6.1114581388888715e-06, 
                  0.00013000553222221664, -0.00035100582600000835, -0.00054626386919445, 
                  -8.274465397222501e-05, 0.00019241326669444168, 0.000638221380277775, 
                  0.00010895874511110835, 0.00048537870041666115, 0.0004873515779722194, 
                  0.0007899978405555445, 0.0006670874948333194, 0.001097677325194436, 
                  0.0003413531940833277, -1.3236402638883308e-05, 0.0005076391490277695 #-0.0002489058273611
                  ]
money_supply = [1018079015923374.4, 981211309971988.6, 985334447747848.4, 
                1023286734351924.6, 1023610777142543.4, 1088244296843641.2, 
                1069352915415187.6, 1061695355474516.0, 1063445830842669.0, 
                1076287784261986.6, 1099031444566765.6, 1106363329039758.4, 
                1140869942116370.2, 1136354996987254.5, 1141282374731608.2, 
                1143371110115704.5, 1183649069545311.5, 1243397276206884.0, 
                1203711073014614.5, 1180402666242004.2, 1187883286761684.8, 
                1183489410752850.2, 1207267127004209.0, 1320881313455269.8, 
                1284984419601184.0, 1308958259224853.2, 1337598782783040.5, 
                1305363691398191.5, 1409580571034758.0, 1353354084534442.0, 
                1334694338944659.5, 1287560416304061.5, 1227722919086746.2, 
                1225323660436970.8, 1229797171716703.5, 1269915254020090.0, 
                1273831013992697.2, 1264903838429059.0, 1292248323025248.8, 
                1336926813621229.5, 1340719486761111.8, 1347532706161685.5, 
                1325263901208568.8, 1342648569211487.8, 1344262226405057.0, 
                1364097506757446.5, 1369498789447323.5, 1336315299433572.8, 
                1336404570934945.2, 1330710762196543.0, 1336949405149744.2, 
                1316354091792804.0, 1338470812044348.5, 1298468119628611.2, 
                1334591742395599.2, 1406110734164489.0, 1404717501942903.8, 
                1391548435576400.8, 1420557836056984.8, 1444716568814006.8, 
                1460022518978685.8, 1439417957327154.5, 1418169565452285.8, 
                1457920005055620.2, 1479320041894593.0, 1471667776601512.5, 
                1500552398546294.2, 1499769525839181.5, 1525662345633679.8, 
                1527582618910760.0, 1658400113755503.0, 1645877443841633.5, 
                1661829940501381.5, 1684112489611245.5, 1704785562024854.8]

plot_inflation_vs_money_supply(inflation_rate, money_supply)
